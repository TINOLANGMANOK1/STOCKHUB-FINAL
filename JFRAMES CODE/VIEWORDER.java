/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Main;

/**
 *
 * @author Acer
 */
import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Vector;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

public class VIEWORDER extends javax.swing.JFrame {

    private String userRole; // Store the user's role
    private MANAGEORDER parentFrame;

    public VIEWORDER(String orderId, String role, MANAGEORDER parent) {
        initComponents();
        loadOrderDetails(orderId);
        this.userRole = role; // Set the user role
        this.parentFrame = parent; // Set the parent frame
        OrderTable.getTableHeader().setFont(new Font("Segoe UI Variable", Font.PLAIN, 14));
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        JTable[] tables = {OrderTable};

        for (JTable table : tables) {
            // Center cells
            for (int i = 0; i < table.getColumnCount(); i++) {
                table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            }

            // Custom header renderer with background color and bold font
            JTableHeader header = table.getTableHeader();
            DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
            headerRenderer.setHorizontalAlignment(JLabel.CENTER);
            headerRenderer.setBackground(Color.decode("#325ea0")); // Your desired color
            headerRenderer.setForeground(Color.WHITE); // White text looks good on dark blue

            // Set font to Segoe UI, size 14, and bold for header only
            headerRenderer.setFont(new Font("Segoe UI", Font.BOLD, 14));  // Ensure it's bold

            // Apply the custom header renderer to each column
            for (int i = 0; i < table.getColumnCount(); i++) {
                table.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
            }

            // Repaint to apply the changes
            header.repaint();  // Ensure the header is repainted after changes
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BackBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        OrderTable = new javax.swing.JTable();
        JlabelDate = new javax.swing.JLabel();
        TotalPriceLabel3 = new javax.swing.JLabel();
        DateLabel = new javax.swing.JLabel();
        TotalPriceLabel = new javax.swing.JLabel();
        OrderLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        JlabelStatus = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        StatusComboBox = new javax.swing.JComboBox<>();
        DeleteBtn = new javax.swing.JButton();
        CancelBtn = new javax.swing.JButton();
        jlabel4 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        BACKGROUND = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BackBtn.setBackground(new java.awt.Color(217, 234, 253));
        BackBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        BackBtn.setForeground(new java.awt.Color(0, 0, 0));
        BackBtn.setText("BACK");
        BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnActionPerformed(evt);
            }
        });
        getContentPane().add(BackBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 530, 170, 42));

        OrderTable.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        OrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Item Id", "Item Name", "Quantity", "Price per Item", "Price all Items"
            }
        ));
        OrderTable.setIntercellSpacing(new java.awt.Dimension(0, 5));
        OrderTable.setRowHeight(25);
        jScrollPane3.setViewportView(OrderTable);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 184, 906, 254));

        JlabelDate.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        JlabelDate.setForeground(new java.awt.Color(0, 0, 0));
        JlabelDate.setText("Date: ");
        getContentPane().add(JlabelDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 140, 70, -1));

        TotalPriceLabel3.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        TotalPriceLabel3.setForeground(new java.awt.Color(0, 0, 0));
        TotalPriceLabel3.setText("Order Id:");
        getContentPane().add(TotalPriceLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, 110, -1));

        DateLabel.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        DateLabel.setForeground(new java.awt.Color(0, 0, 0));
        DateLabel.setText("DateLabel");
        getContentPane().add(DateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 140, 150, -1));

        TotalPriceLabel.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        TotalPriceLabel.setForeground(new java.awt.Color(0, 153, 0));
        TotalPriceLabel.setText("TotalPrice");
        getContentPane().add(TotalPriceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 456, 80, -1));

        OrderLabel.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        OrderLabel.setForeground(new java.awt.Color(0, 0, 0));
        OrderLabel.setText("OrderLabel");
        getContentPane().add(OrderLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 140, 130, -1));

        jLabel7.setFont(new java.awt.Font("Tw Cen MT", 1, 30)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("STOCKHUB");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(415, 10, -1, -1));

        JlabelStatus.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        JlabelStatus.setForeground(new java.awt.Color(0, 0, 0));
        JlabelStatus.setText("Status:");
        getContentPane().add(JlabelStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 140, 69, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Order and Inventory System");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(392, 40, -1, -1));

        StatusComboBox.setBackground(new java.awt.Color(217, 234, 253));
        StatusComboBox.setFont(new java.awt.Font("Segoe UI Variable", 0, 12)); // NOI18N
        StatusComboBox.setForeground(new java.awt.Color(0, 0, 0));
        StatusComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Completed", "Pending" }));
        StatusComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatusComboBoxActionPerformed(evt);
            }
        });
        getContentPane().add(StatusComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 136, 140, 32));

        DeleteBtn.setBackground(new java.awt.Color(217, 234, 253));
        DeleteBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        DeleteBtn.setForeground(new java.awt.Color(204, 0, 51));
        DeleteBtn.setText("DELETE ORDER");
        DeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnActionPerformed(evt);
            }
        });
        getContentPane().add(DeleteBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 530, 170, 42));

        CancelBtn.setBackground(new java.awt.Color(217, 234, 253));
        CancelBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        CancelBtn.setForeground(new java.awt.Color(0, 0, 0));
        CancelBtn.setText("CANCEL ORDER");
        CancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelBtnActionPerformed(evt);
            }
        });
        getContentPane().add(CancelBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 530, 170, 42));

        jlabel4.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jlabel4.setForeground(new java.awt.Color(0, 0, 0));
        jlabel4.setText("Total Price:");
        getContentPane().add(jlabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 456, 90, 20));

        jLabel4.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("VIEW ORDER");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(441, 92, 90, -1));

        BACKGROUND.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/ADDORDER BG FINAL.png"))); // NOI18N
        BACKGROUND.setText("Total Price:");
        getContentPane().add(BACKGROUND, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 970, -1));
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 970, 610));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnActionPerformed
        // TODO add your handling code here:
        new MANAGEORDER(userRole).setVisible(true);
        dispose();
    }//GEN-LAST:event_BackBtnActionPerformed

    private void DeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        String orderIdToDelete = OrderLabel.getText();

        try {
            JSONParser parser = new JSONParser();
            FileReader reader = new FileReader("src//Main//Orders.json");
            JSONArray orders = (JSONArray) parser.parse(reader);
            reader.close();

            boolean removed = false;
            for (int i = 0; i < orders.size(); i++) {
                JSONObject order = (JSONObject) orders.get(i);
                if (order.get("orderId").equals(orderIdToDelete)) {
                    // Ask for confirmation before deleting
                    int confirm = JOptionPane.showConfirmDialog(
                            this,
                            "Are you sure you want to delete this order?",
                            "Confirm Deletion",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE
                    );

                    if (confirm != JOptionPane.YES_OPTION) {
                        return; // If user cancels, do nothing
                    }

                    // Proceed with deleting the order
                    orders.remove(i);
                    removed = true;
                    break;
                }
            }

            if (removed) {
                // Write updated JSON array back to file
                try (java.io.FileWriter file = new java.io.FileWriter("src//Main//Orders.json")) {
                    file.write(orders.toJSONString());
                    file.flush();
                }
                // Show success message
                JOptionPane.showMessageDialog(this, "Order deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                new MANAGEORDER(userRole).setVisible(true);  // Reload the order management screen
                dispose();
            } else {
                // If no matching order is found
                JOptionPane.showMessageDialog(this, "Order not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while deleting the order.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DeleteBtnActionPerformed

    private void CancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelBtnActionPerformed
        String orderIdToCancel = OrderLabel.getText();

        try {
            // Step 1: Load the current order details from Orders.json
            JSONParser parser = new JSONParser();
            FileReader reader = new FileReader("src//Main//Orders.json");
            JSONArray orders = (JSONArray) parser.parse(reader);
            reader.close();

            for (Object obj : orders) {
                JSONObject order = (JSONObject) obj;
                String currentOrderId = (String) order.get("orderId");
                String orderStatus = (String) order.get("status");

                if (currentOrderId.equals(orderIdToCancel)) {
                    // Step 2: Check if the status is "Completed"
                    if (orderStatus.equals("Completed")) {
                        JOptionPane.showMessageDialog(this,
                                "This order has already been completed and cannot be canceled.",
                                "Cannot Cancel Order",
                                JOptionPane.INFORMATION_MESSAGE);
                        return;
                    }

                    // Check if the order is pending and ask for confirmation
                    if (orderStatus.equals("Pending")) {
                        int confirm = JOptionPane.showConfirmDialog(
                                this,
                                "Are you sure you want to cancel this order?",
                                "Confirm Cancellation",
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.QUESTION_MESSAGE
                        );

                        if (confirm != JOptionPane.YES_OPTION) {
                            return;
                        }
                    }

                    // Step 3: If status is not "Completed" or the user confirmed cancellation, proceed with canceling the order
                    JSONArray items = (JSONArray) order.get("items");

                    // Load items.json to update the quantities
                    FileReader itemReader = new FileReader("src//Main//items.json");
                    JSONArray itemsList = (JSONArray) parser.parse(itemReader);
                    itemReader.close();

                    for (Object itemObj : items) {
                        JSONObject item = (JSONObject) itemObj;
                        String itemNumber = (String) item.get("itemNumber");
                        long quantityToRestore = (Long) item.get("quantity");

                        // Step 4: Find the item in items.json and restore the quantity
                        for (Object stockItemObj : itemsList) {
                            JSONObject stockItem = (JSONObject) stockItemObj;
                            if (stockItem.get("itemNumber").equals(itemNumber)) {
                                long currentStock = (Long) stockItem.get("quantity");
                                stockItem.put("quantity", currentStock + quantityToRestore);
                                break;
                            }
                        }
                    }

                    // Save the updated items back to items.json
                    try (FileWriter itemFile = new FileWriter("src//Main//items.json")) {
                        itemFile.write(itemsList.toJSONString());
                        itemFile.flush();
                    }

                    // Step 5: Optionally, remove the canceled order from Orders.json or just mark it as canceled
                    orders.remove(obj);

                    // Save the updated Orders.json file
                    try (FileWriter orderFile = new FileWriter("src//Main//Orders.json")) {
                        orderFile.write(orders.toJSONString());
                        orderFile.flush();
                    }

                    JOptionPane.showMessageDialog(this,
                            "Order has been canceled and quantities restored.",
                            "Order Canceled",
                            JOptionPane.INFORMATION_MESSAGE);
                    new MANAGEORDER(userRole).setVisible(true);
                    dispose();
                    return;
                }
            }

            JOptionPane.showMessageDialog(this,
                    "Order not found.",
                    "Order Not Found",
                    JOptionPane.ERROR_MESSAGE);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "An error occurred while canceling the order.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CancelBtnActionPerformed

    private void StatusComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StatusComboBoxActionPerformed
                                          
    String selectedStatus = (String) StatusComboBox.getSelectedItem();
    String orderId = OrderLabel.getText(); // Get the order ID from the label

    try {
        // Load Orders.json file
        JSONParser parser = new JSONParser();
        FileReader reader = new FileReader("src//Main//Orders.json");
        JSONArray orders = (JSONArray) parser.parse(reader);
        reader.close();

        boolean updated = false;

        for (Object obj : orders) {
            JSONObject order = (JSONObject) obj;
            if (order.get("orderId").equals(orderId)) {
                String currentStatus = (String) order.get("status");

                // If the current status is "Pending" and we are changing it to "Completed"
                if (currentStatus.equals("Pending") && selectedStatus.equals("Completed")) {
                    int response = JOptionPane.showConfirmDialog(this,
                            "Once marked as 'Completed', the status can't be reverted. Proceed?",
                            "Confirm Status Change",
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                    if (response == JOptionPane.YES_OPTION) {
                        order.put("status", selectedStatus);
                        updated = true;

                        // Get the total price of the order
                        double totalPrice = (Double) order.get("totalPrice");

                        // Update the DailySales.json with today's sales
                        updateDailySalesFromCompletedOrder(totalPrice);

                        // Update OrderStats.json with the items and their quantities
                        JSONArray items = (JSONArray) order.get("items"); // Cast `items` to JSONArray
                        updateOrderStats(items); // Pass the JSONArray to the method

                        // Update orderSummary.json with the completed order's items
                        String orderDate = (String) order.get("date");
                        updateOrderSummary(orderDate, items); // Call to update the orderSummary.json

                        // Save immediately
                        try (FileWriter file = new FileWriter("src//Main//Orders.json")) {
                            file.write(orders.toJSONString());
                            file.flush();
                        }

                        // Remove "Pending" option from the combo box
                        StatusComboBox.removeItem("Pending");

                        // Show success message and go to MANAGEORDER
                        JOptionPane.showMessageDialog(this, "Order marked as completed successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                        new MANAGEORDER(userRole).setVisible(true);
                        dispose();
                        return; // Stop here
                    } else {
                        // Reset to "Pending" if user says "No"
                        StatusComboBox.setSelectedItem("Pending");
                        return; // Exit method without further changes
                    }
                }

                // If the status is already "Completed", prevent change
                if (currentStatus.equals("Completed") && !selectedStatus.equals("Completed")) {
                    JOptionPane.showMessageDialog(this,
                            "Status cannot be changed back to 'Pending' once it is marked as 'Completed'.",
                            "Invalid Action", JOptionPane.WARNING_MESSAGE);
                    StatusComboBox.setSelectedItem("Completed");
                    return;
                }

                // Ask for confirmation for other changes
                if (!currentStatus.equals(selectedStatus)) {
                    int confirm = JOptionPane.showConfirmDialog(this,
                            "Are you sure you want to change the status from " + currentStatus + " to " + selectedStatus + "?",
                            "Confirm Status Change", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                    if (confirm == JOptionPane.YES_OPTION) {
                        order.put("status", selectedStatus);
                        updated = true;
                    } else {
                        StatusComboBox.setSelectedItem(currentStatus);
                    }
                }

                // If the current status is "Completed", ensure "Pending" is not shown
                if (currentStatus.equals("Completed")) {
                    StatusComboBox.removeItem("Pending");
                }

                break;
            }
        }

        if (updated) {
            // Save updated status (this only happens for non-pending-completed changes)
            try (FileWriter file = new FileWriter("src//Main//Orders.json")) {
                file.write(orders.toJSONString());
                file.flush();
            }

            // Success message
            JOptionPane.showMessageDialog(this, "Order status updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "An error occurred while updating the order status.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }

    private void updateDailySalesFromCompletedOrder(double orderTotalPrice) {
        try {
            // Load or create DailySales.json
            JSONParser parser = new JSONParser();
            File salesFile = new File("src/Main/DailySales.json");
            JSONArray salesArray = new JSONArray();

            if (salesFile.exists()) {
                salesArray = (JSONArray) parser.parse(new FileReader(salesFile));
            }

            // Get today's date
            LocalDate today = LocalDate.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d/MM/yyyy");
            String todayStr = today.format(formatter);

            boolean salesUpdated = false;

            // Check if there's an existing record for today's sales
            for (Object obj : salesArray) {
                JSONObject record = (JSONObject) obj;
                String date = (String) record.get("date");

                // If we find today's record, update its total sales
                if (date.equals(todayStr)) {
                    double currentTotal = (Double) record.get("totalSales");
                    record.put("totalSales", currentTotal + orderTotalPrice);  // Add the order's total price
                    salesUpdated = true;
                    break;
                }
            }

            // If no record for today, create a new record for today's sales
            if (!salesUpdated) {
                JSONObject newRecord = new JSONObject();
                newRecord.put("date", todayStr);
                newRecord.put("totalSales", orderTotalPrice);  // Set today's total sales
                salesArray.add(newRecord);
            }

            // Since this is daily data, reset any previous day's sales data and keep only today's data
            JSONArray filteredSalesArray = new JSONArray();
            for (Object obj : salesArray) {
                JSONObject record = (JSONObject) obj;
                String date = (String) record.get("date");

                // Keep only today's record
                if (date.equals(todayStr)) {
                    filteredSalesArray.add(record);
                }
            }

            // Replace the salesArray with the filtered data
            salesArray = filteredSalesArray;

            // Save the updated sales data back to the file (overwrite DailySales.json)
            try (FileWriter writer = new FileWriter(salesFile)) {
                writer.write(salesArray.toJSONString());
                writer.flush();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

// Helper method to check if the "Pending" option is already removed
    private boolean isPendingOptionHidden() {
        for (int i = 0; i < StatusComboBox.getItemCount(); i++) {
            if (StatusComboBox.getItemAt(i).equals("Pending")) {
                return false; // "Pending" is still there
            }
        }
        return true; // "Pending" is already removed
    }//GEN-LAST:event_StatusComboBoxActionPerformed

    private void loadOrderDetails(String orderId) {
        try {
            JSONParser parser = new JSONParser();
            JSONArray orders = (JSONArray) parser.parse(new FileReader("src//Main//Orders.json"));

            double totalPrice = 0.0; // Variable to accumulate the total price

            for (Object obj : orders) {
                JSONObject order = (JSONObject) obj;
                String currentOrderId = (String) order.get("orderId");

                if (currentOrderId.equals(orderId)) {
                    // Set Order ID and Date
                    OrderLabel.setText(currentOrderId);
                    DateLabel.setText((String) order.get("date"));

                    // Set Status in ComboBox
                    String status = (String) order.get("status");
                    StatusComboBox.setSelectedItem(status);

                    // Load items into table
                    JSONArray items = (JSONArray) order.get("items");
                    DefaultTableModel model = (DefaultTableModel) OrderTable.getModel();
                    model.setRowCount(0); // Clear existing rows

                    // Sorting the items based on itemNumber in ascending order
                    items.sort((o1, o2) -> {
                        String itemNumber1 = (String) ((JSONObject) o1).get("itemNumber");
                        String itemNumber2 = (String) ((JSONObject) o2).get("itemNumber");
                        return itemNumber1.compareTo(itemNumber2); // Ascending order
                    });

                    // Add sorted items to the table
                    for (Object itemObj : items) {
                        JSONObject item = (JSONObject) itemObj;
                        Vector<String> row = new Vector<>();
                        row.add((String) item.get("itemNumber")); // Use itemNumber
                        row.add((String) item.get("itemName"));
                        row.add(String.valueOf(item.get("quantity")));

                        double pricePerItem = (Double) item.get("price");
                        long quantity = (Long) item.get("quantity");
                        double totalItemPrice = pricePerItem * quantity;

                        // Display price per item with ₱ symbol
                        row.add(String.format("₱%.2f", pricePerItem));

                        // Display total price per item with ₱ symbol
                        row.add(String.format("₱%.2f", totalItemPrice));

                        totalPrice += totalItemPrice; // Accumulate total price

                        model.addRow(row);
                    }

                    // Display total price in the TotalPriceLabel with ₱ symbol
                    TotalPriceLabel.setText(String.format("₱%.2f", totalPrice));

                    // Set the actual total price (without ₱ symbol) in the JSON data
                    order.put("totalPrice", totalPrice);

                    break;
                }
            }

            // Save the updated orders back to the JSON file (if needed)
            try (FileWriter file = new FileWriter("src//Main//Orders.json")) {
                file.write(orders.toJSONString());
                file.flush();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void updateOrderStats(JSONArray itemsArray) {
        try {
            // Load OrderStats.json
            JSONParser parser = new JSONParser();
            FileReader statsReader = new FileReader("src//Main//OrderStats.json");
            JSONObject orderStats = (JSONObject) parser.parse(statsReader);
            statsReader.close();

            // Iterate through itemsArray and update the statistics for each item
            for (Object itemObj : itemsArray) {
                JSONObject item = (JSONObject) itemObj;
                String itemName = (String) item.get("itemName"); // Use "itemName" field
                long quantity = (long) item.get("quantity"); // Use "quantity" field

                // Update the item's quantity in OrderStats.json
                if (orderStats.containsKey(itemName)) {
                    long currentQuantity = (long) orderStats.get(itemName);
                    orderStats.put(itemName, currentQuantity + quantity);
                } else {
                    orderStats.put(itemName, quantity);
                }
            }

            // Save the updated OrderStats.json
            try (FileWriter statsWriter = new FileWriter("src//Main//OrderStats.json")) {
                statsWriter.write(orderStats.toJSONString());
                statsWriter.flush();
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while updating order statistics.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void updateOrderSummary(String orderDate, JSONArray items) {
        String filePath = "src//Main//orderSummary.json";

        try {
            JSONParser parser = new JSONParser();
            JSONArray orderSummaryArray;

            // Read the existing orderSummary.json
            try (FileReader reader = new FileReader(filePath)) {
                orderSummaryArray = (JSONArray) parser.parse(reader);
            } catch (Exception e) {
                orderSummaryArray = new JSONArray(); // If file doesn't exist or is empty, start with a new array
            }

            // Check if the date already exists in the orderSummary
            JSONObject existingSummaryForDate = null;
            for (Object obj : orderSummaryArray) {
                JSONObject summary = (JSONObject) obj;
                if (summary.get("date").equals(orderDate)) {
                    existingSummaryForDate = summary;
                    break;
                }
            }

            if (existingSummaryForDate == null) {
                // If no entry exists for the date, create a new one
                JSONObject newSummary = new JSONObject();
                newSummary.put("date", orderDate);
                newSummary.put("items", new JSONArray());

                // Add all items to the new entry
                for (Object itemObj : items) {
                    JSONObject item = (JSONObject) itemObj;
                    JSONObject newItem = new JSONObject();
                    newItem.put("name", item.get("itemName"));
                    newItem.put("quantitySold", item.get("quantity"));
                    ((JSONArray) newSummary.get("items")).add(newItem);
                }

                orderSummaryArray.add(newSummary);
            } else {
                // If an entry exists for the date, update it
                JSONArray existingItems = (JSONArray) existingSummaryForDate.get("items");

                for (Object itemObj : items) {
                    JSONObject newItem = (JSONObject) itemObj;
                    boolean itemExists = false;

                    // Check if the item already exists in the summary for the date
                    for (Object existingItemObj : existingItems) {
                        JSONObject existingItem = (JSONObject) existingItemObj;
                        if (existingItem.get("name").equals(newItem.get("itemName"))) {
                            // If the item exists, update its quantitySold
                            long existingQuantity = (long) existingItem.get("quantitySold");
                            long newQuantity = (long) newItem.get("quantity");
                            existingItem.put("quantitySold", existingQuantity + newQuantity);
                            itemExists = true;
                            break;
                        }
                    }

                    // If the item does not exist, add it to the summary
                    if (!itemExists) {
                        JSONObject itemToAdd = new JSONObject();
                        itemToAdd.put("name", newItem.get("itemName"));
                        itemToAdd.put("quantitySold", newItem.get("quantity"));
                        existingItems.add(itemToAdd);
                    }
                }
            }

            // Write the updated orderSummary back to the file
            try (FileWriter writer = new FileWriter(filePath)) {
                writer.write(orderSummaryArray.toJSONString());
                writer.flush();
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating order summary: " + e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VIEWORDER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VIEWORDER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VIEWORDER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VIEWORDER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BACKGROUND;
    private javax.swing.JButton BackBtn;
    private javax.swing.JButton CancelBtn;
    private javax.swing.JLabel DateLabel;
    private javax.swing.JButton DeleteBtn;
    private javax.swing.JLabel JlabelDate;
    private javax.swing.JLabel JlabelStatus;
    private javax.swing.JLabel OrderLabel;
    private javax.swing.JTable OrderTable;
    private javax.swing.JComboBox<String> StatusComboBox;
    private javax.swing.JLabel TotalPriceLabel;
    private javax.swing.JLabel TotalPriceLabel3;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel jlabel4;
    // End of variables declaration//GEN-END:variables
}
