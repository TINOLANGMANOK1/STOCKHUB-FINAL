/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Main;

/**
 *
 * @author Acer
 */
import java.awt.Color;
import java.awt.Font;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class MANAGEEMPLOYEE extends javax.swing.JFrame {

    public MANAGEEMPLOYEE() {
        initComponents();
        loadAllAccounts();

        SearchF.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
                filterTable();
            }

            public void removeUpdate(DocumentEvent e) {
                filterTable();
            }

            public void changedUpdate(DocumentEvent e) {
                filterTable();
            }
        });
        AccTable.getTableHeader().setFont(new Font("Segoe UI Variable", Font.PLAIN, 14));
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        JTable[] tables = {AccTable};

        for (JTable table : tables) {
            for (int i = 0; i < table.getColumnCount(); i++) {
                table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            }

            JTableHeader header = table.getTableHeader();
            DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
            headerRenderer.setHorizontalAlignment(JLabel.CENTER);
            headerRenderer.setBackground(Color.decode("#325ea0"));
            headerRenderer.setForeground(Color.WHITE);
            headerRenderer.setFont(new Font("Segoe UI", Font.BOLD, 14));

            for (int i = 0; i < table.getColumnCount(); i++) {
                table.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
            }

            header.repaint();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        SearchF = new javax.swing.JTextField();
        BackBtn = new javax.swing.JButton();
        AddNewAccountBtn = new javax.swing.JButton();
        FilterComboBox = new javax.swing.JComboBox<>();
        EditAccBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        AccTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        FINALBG = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Search Name/Id:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 145, 110, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Filter:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 190, 39, -1));
        getContentPane().add(SearchF, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 140, 345, 32));

        BackBtn.setBackground(new java.awt.Color(217, 234, 253));
        BackBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        BackBtn.setForeground(new java.awt.Color(0, 0, 0));
        BackBtn.setText("BACK");
        BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnActionPerformed(evt);
            }
        });
        getContentPane().add(BackBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 530, 170, 42));

        AddNewAccountBtn.setBackground(new java.awt.Color(217, 234, 253));
        AddNewAccountBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        AddNewAccountBtn.setForeground(new java.awt.Color(0, 0, 0));
        AddNewAccountBtn.setText("ADD NEW ACCOUNT");
        AddNewAccountBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewAccountBtnActionPerformed(evt);
            }
        });
        getContentPane().add(AddNewAccountBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 530, 170, 42));

        FilterComboBox.setBackground(new java.awt.Color(217, 234, 253));
        FilterComboBox.setFont(new java.awt.Font("Segoe UI Variable", 0, 12)); // NOI18N
        FilterComboBox.setForeground(new java.awt.Color(0, 0, 0));
        FilterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Admin", "Employee" }));
        FilterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterComboBoxActionPerformed(evt);
            }
        });
        getContentPane().add(FilterComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 184, 140, 32));

        EditAccBtn.setBackground(new java.awt.Color(217, 234, 253));
        EditAccBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        EditAccBtn.setForeground(new java.awt.Color(0, 0, 0));
        EditAccBtn.setText("EDIT ACCOUNT");
        EditAccBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditAccBtnActionPerformed(evt);
            }
        });
        getContentPane().add(EditAccBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 530, 170, 42));

        AccTable.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        AccTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Account No.", "Name", "Role"
            }
        ));
        AccTable.setIntercellSpacing(new java.awt.Dimension(0, 5));
        AccTable.setRowHeight(25);
        jScrollPane2.setViewportView(AccTable);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 240, 906, 243));

        jLabel4.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("MANAGE ACCOUNT");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(415, 92, 140, -1));

        FINALBG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/MANAGEINVENTORY BG FINAL.png"))); // NOI18N
        FINALBG.setText("jLabel4");
        getContentPane().add(FINALBG, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 970, -1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 970, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 610, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 970, 610));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnActionPerformed
        // TODO add your handling code here:
        ADMINMENU x = new ADMINMENU();
        x.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_BackBtnActionPerformed

    private void AddNewAccountBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNewAccountBtnActionPerformed
        // TODO add your handling code here:
        ADDACC addFrame = new ADDACC(this);
        addFrame.setVisible(true);

    }//GEN-LAST:event_AddNewAccountBtnActionPerformed

    private void FilterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterComboBoxActionPerformed
        // TODO add your handling code here:
        String selectedRole = FilterComboBox.getSelectedItem().toString();
        loadFromJson(selectedRole, null);
    }//GEN-LAST:event_FilterComboBoxActionPerformed

    private void EditAccBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditAccBtnActionPerformed
        // TODO add your handling code here:
        editSelectedAccount();

    }//GEN-LAST:event_EditAccBtnActionPerformed
    private void loadAllAccounts() {
        loadFromJson("All", null);
    }

    private void filterByKeyword(String keyword) {
        String filepath = "src\\Main\\employee.json";
        JSONParser parser = new JSONParser();
        DefaultTableModel model = (DefaultTableModel) AccTable.getModel();
        model.setRowCount(0);

        try (FileReader reader = new FileReader(filepath)) {
            JSONObject data = (JSONObject) parser.parse(reader);
            JSONArray employees = (JSONArray) data.get("employee");

            for (Object obj : employees) {
                JSONObject emp = (JSONObject) obj;
                String accountNumber = emp.get("accountNumber").toString().toLowerCase();
                String username = emp.get("username").toString().toLowerCase();
                String role = emp.get("role").toString();

                if (accountNumber.contains(keyword) || username.contains(keyword)) {
                    model.addRow(new Object[]{emp.get("accountNumber"), emp.get("username"), role});
                }
            }

        } catch (IOException | ParseException e) {
            JOptionPane.showMessageDialog(this, "Failed to load accounts: " + e.getMessage());
        }
    }

    private void loadFromJson(String roleFilter, String accountNumberFilter) {
    String filepath = "src\\Main\\employee.json";
    JSONParser parser = new JSONParser();
    DefaultTableModel model = (DefaultTableModel) AccTable.getModel();
    model.setRowCount(0);

    try (FileReader reader = new FileReader(filepath)) {
        JSONObject data = (JSONObject) parser.parse(reader);
        JSONArray employees = (JSONArray) data.get("employee");

        // Sort the JSONArray by accountNumber in ascending order
        employees.sort((o1, o2) -> {
            int accountNum1 = Integer.parseInt(((JSONObject) o1).get("accountNumber").toString());
            int accountNum2 = Integer.parseInt(((JSONObject) o2).get("accountNumber").toString());
            return Integer.compare(accountNum1, accountNum2); // Ascending order
        });

        for (Object obj : employees) {
            JSONObject emp = (JSONObject) obj;
            String accountNumber = emp.get("accountNumber").toString();
            String username = emp.get("username").toString();
            String role = emp.get("role").toString();

            boolean roleMatches = roleFilter == null || roleFilter.equals("All") || role.equalsIgnoreCase(roleFilter);
            boolean accountNumberMatches = accountNumberFilter == null || accountNumber.equalsIgnoreCase(accountNumberFilter);

            if (roleMatches && accountNumberMatches) {
                model.addRow(new Object[]{accountNumber, username, role});
            }
        }

    } catch (IOException | ParseException e) {
        JOptionPane.showMessageDialog(this, "Failed to load accounts: " + e.getMessage());
    }
}

    private void editSelectedAccount() {
        int selectedRow = AccTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an account to edit.");
            return;
        }

        String accountNumber = AccTable.getValueAt(selectedRow, 0).toString();
        String name = AccTable.getValueAt(selectedRow, 1).toString();
        String role = AccTable.getValueAt(selectedRow, 2).toString();
        String password = "";

        String filepath = "src\\Main\\employee.json";
        JSONParser parser = new JSONParser();

        try (FileReader reader = new FileReader(filepath)) {
            JSONObject data = (JSONObject) parser.parse(reader);
            JSONArray employees = (JSONArray) data.get("employee");

            for (Object obj : employees) {
                JSONObject emp = (JSONObject) obj;
                if (emp.get("accountNumber").toString().equals(accountNumber)) {
                    password = emp.get("password").toString();
                    break;
                }
            }
        } catch (IOException | ParseException e) {
            JOptionPane.showMessageDialog(this, "Failed to load account data.");
            return;
        }

        EDITACC editFrame = new EDITACC(this, accountNumber, name, password, role);
        editFrame.setVisible(true);
    }

    private void filterTable() {
        String keyword = SearchF.getText().trim().toLowerCase();
        if (keyword.isEmpty()) {
            loadAllAccounts();
        } else {
            filterByKeyword(keyword);
        }
    }

    public void refreshTable() {
        loadAllAccounts();
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MANAGEEMPLOYEE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AccTable;
    private javax.swing.JButton AddNewAccountBtn;
    private javax.swing.JButton BackBtn;
    private javax.swing.JButton EditAccBtn;
    private javax.swing.JLabel FINALBG;
    private javax.swing.JComboBox<String> FilterComboBox;
    private javax.swing.JTextField SearchF;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
