/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Main;

/**
 *
 * @author Acer
 */
import java.awt.Color;
import java.awt.Font;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;

public class RESTOCKSUGGESTION extends javax.swing.JFrame {

    public RESTOCKSUGGESTION() {
        initComponents();
        loadRestockSuggestions();
        SearchF.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                filterTable();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                filterTable();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                filterTable();
            }
        });

        SuggestionTable.getTableHeader().setFont(new Font("Segoe UI Variable", Font.PLAIN, 14));
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        JTable[] tables = {SuggestionTable};

        for (JTable table : tables) {
            // Center cells
            for (int i = 0; i < table.getColumnCount(); i++) {
                table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            }

            // Custom header renderer with background color and bold font
            JTableHeader header = table.getTableHeader();
            DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
            headerRenderer.setHorizontalAlignment(JLabel.CENTER);
            headerRenderer.setBackground(Color.decode("#325ea0")); // Your desired color
            headerRenderer.setForeground(Color.WHITE); // White text looks good on dark blue

            // Set font to Segoe UI, size 14, and bold for header only
            headerRenderer.setFont(new Font("Segoe UI", Font.BOLD, 14));  // Ensure it's bold

            // Apply the custom header renderer to each column
            for (int i = 0; i < table.getColumnCount(); i++) {
                table.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
            }

            // Repaint to apply the changes
            header.repaint();  // Ensure the header is repainted after changes
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        SuggestionTable = new javax.swing.JTable();
        BackBtn = new javax.swing.JButton();
        DemandComboBox = new javax.swing.JComboBox<>();
        PriorityComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        SearchF = new javax.swing.JTextField();
        BGFINAL = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        SuggestionTable.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        SuggestionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Item Id", "Item Name", "Current Stock", "Suggested Stock", "Avg Orders/Week", "Demand Level", "Priority"
            }
        ));
        SuggestionTable.setIntercellSpacing(new java.awt.Dimension(0, 5));
        SuggestionTable.setRowHeight(25);
        jScrollPane1.setViewportView(SuggestionTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 240, 906, 243));

        BackBtn.setBackground(new java.awt.Color(217, 234, 253));
        BackBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        BackBtn.setForeground(new java.awt.Color(0, 0, 0));
        BackBtn.setText("BACK");
        BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnActionPerformed(evt);
            }
        });
        getContentPane().add(BackBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 530, 170, 42));

        DemandComboBox.setBackground(new java.awt.Color(217, 234, 253));
        DemandComboBox.setFont(new java.awt.Font("Segoe UI Variable", 0, 12)); // NOI18N
        DemandComboBox.setForeground(new java.awt.Color(0, 0, 0));
        DemandComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Demand", "Increasing", "Stable", "Decreasing", "No Sales Made" }));
        DemandComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DemandComboBoxActionPerformed(evt);
            }
        });
        getContentPane().add(DemandComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 184, 140, 32));

        PriorityComboBox.setBackground(new java.awt.Color(217, 234, 253));
        PriorityComboBox.setFont(new java.awt.Font("Segoe UI Variable", 0, 12)); // NOI18N
        PriorityComboBox.setForeground(new java.awt.Color(0, 0, 0));
        PriorityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Priority", "High", "Medium", "Low" }));
        PriorityComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PriorityComboBoxActionPerformed(evt);
            }
        });
        getContentPane().add(PriorityComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(385, 184, 140, 32));

        jLabel5.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("RESTOCK SUGGESTION");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(406, 92, 160, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Search Name/Id:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 145, 110, -1));

        jLabel7.setFont(new java.awt.Font("Tw Cen MT", 1, 30)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("STOCKHUB");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(415, 10, -1, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Order and Inventory System");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(392, 40, -1, 20));

        jLabel3.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Filter:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 190, 39, -1));
        getContentPane().add(SearchF, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 140, 345, 32));

        BGFINAL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/MANAGEINVENTORY BG FINAL.png"))); // NOI18N
        BGFINAL.setText("jLabel1");
        getContentPane().add(BGFINAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 970, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnActionPerformed
        // TODO add your handling code here:
        ADMINMENU x = new ADMINMENU();
        x.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_BackBtnActionPerformed

    private void DemandComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DemandComboBoxActionPerformed
        // TODO add your handling code here:
        applyFilters();
    }//GEN-LAST:event_DemandComboBoxActionPerformed

    private void PriorityComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PriorityComboBoxActionPerformed
        // TODO add your handling code here:
        applyFilters();
    }//GEN-LAST:event_PriorityComboBoxActionPerformed

    private void loadRestockSuggestions() {
    DefaultTableModel model = (DefaultTableModel) SuggestionTable.getModel();
    model.setRowCount(0); // Clear existing rows in the table

    try {
        JSONParser parser = new JSONParser();

        // Read Items.json and orderSummary.json files
        JSONArray itemsArray = (JSONArray) parser.parse(new FileReader("src/Main/Items.json"));
        JSONArray orderSummaryArray = (JSONArray) parser.parse(new FileReader("src/Main/orderSummary.json"));

        Map<String, Integer> salesMap = new HashMap<>();

        // Process sales data from orderSummary.json
        for (Object summaryObj : orderSummaryArray) {
            JSONObject summary = (JSONObject) summaryObj;
            JSONArray items = (JSONArray) summary.get("items");

            for (Object itemObj : items) {
                JSONObject item = (JSONObject) itemObj;
                String itemName = (String) item.get("name");
                long quantitySold = (long) item.get("quantitySold");

                // Update sales data (total sales per item)
                salesMap.put(itemName, salesMap.getOrDefault(itemName, 0) + (int) quantitySold);
            }
        }

        // Process items and calculate restock suggestions
        for (Object obj : itemsArray) {
            JSONObject item = (JSONObject) obj;
            String itemNumber = (String) item.get("itemNumber");
            String itemName = (String) item.get("name");
            long quantity = (long) item.get("quantity");
            int sold = salesMap.getOrDefault(itemName, 0);

            // Calculate average orders per week (sales/3 weeks)
            int avgOrdersPerWeek = sold / 3;
            String demandLevel = "Stable";
            String priority = "Low";
            int suggestedRestock = 0;

            // Determine demand level using sales data
            if (sold == 0) {
                demandLevel = "No Recent Sales"; // Updated demand level for no sales in 3 weeks
            } else if (avgOrdersPerWeek > 10) {
                demandLevel = "Increasing";
            } else if (avgOrdersPerWeek > 5) {
                demandLevel = "Stable";
            } else {
                demandLevel = "Decreasing";
            }

            // Adjust buffer factor based on demand level
            double bufferFactor = 1.5; // Default buffer for stable demand
            if (demandLevel.equals("Increasing")) {
                bufferFactor = 2.0;
            } else if (demandLevel.equals("Decreasing")) {
                bufferFactor = 0.75;
            }

            // Calculate restock threshold
            double restockThreshold = avgOrdersPerWeek * bufferFactor + 10; // Add a safety margin of 10

            // Skip restocking if current stock is significantly higher than the threshold
            if (quantity > restockThreshold && quantity > (avgOrdersPerWeek + 10)) {
                continue; // Skip this item
            }

            // Suggested stock logic with buffer for stock levels
            if (quantity < 11) {
                // Low stock needs a fixed restock, even if no sales have been made
                suggestedRestock = 20;
                priority = "High";

                // Ensure demand level reflects "No Recent Sales"
                if (demandLevel.equals("No Recent Sales")) {
                    demandLevel = "No Recent Sales"; // Explicitly reflect low stock with no sales
                }
            } else if (quantity >= 11 && quantity <= 100) {
                suggestedRestock = (int) ((avgOrdersPerWeek * bufferFactor) - quantity);
                priority = "Medium";
            } else {
                suggestedRestock = (int) avgOrdersPerWeek;
                priority = "Low";
            }

            // Ensure suggested restock is not negative
            if (suggestedRestock <= 0 && quantity < 50) {
                suggestedRestock = 10; // Minimum restock for low to moderate stock
            }

            // Only add to the table if restock is needed (non-zero suggested restock)
            if (suggestedRestock > 0) {
                model.addRow(new Object[]{
                    itemNumber,
                    itemName,
                    quantity,
                    suggestedRestock,
                    avgOrdersPerWeek,
                    demandLevel,
                    priority
                });
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading restock data: " + e.getMessage());
    }
}

    private void filterTable() {
        applyFilters();
    }

    private void applyFilters() {
        String searchText = SearchF.getText().toLowerCase();
        String selectedTrend = (String) DemandComboBox.getSelectedItem();
        String selectedPriority = (String) PriorityComboBox.getSelectedItem();

        loadRestockSuggestions();

        DefaultTableModel model = (DefaultTableModel) SuggestionTable.getModel();

        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            String itemId = model.getValueAt(i, 0).toString().toLowerCase();
            String itemName = model.getValueAt(i, 1).toString().toLowerCase();
            String trend = model.getValueAt(i, 5).toString();
            String priority = model.getValueAt(i, 6).toString();

            boolean matchSearch = itemId.contains(searchText) || itemName.contains(searchText);
            boolean matchTrend = selectedTrend.equals("All Demand") || trend.equals(selectedTrend);
            boolean matchPriority = selectedPriority.equals("All Priority") || priority.equals(selectedPriority);

            if (!(matchSearch && matchTrend && matchPriority)) {
                model.removeRow(i);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RESTOCKSUGGESTION.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RESTOCKSUGGESTION.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RESTOCKSUGGESTION.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RESTOCKSUGGESTION.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RESTOCKSUGGESTION().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BGFINAL;
    private javax.swing.JButton BackBtn;
    private javax.swing.JComboBox<String> DemandComboBox;
    private javax.swing.JComboBox<String> PriorityComboBox;
    private javax.swing.JTextField SearchF;
    private javax.swing.JTable SuggestionTable;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
