/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Main;

/**
 *
 * @author Acer
 */
import java.awt.Color;
import java.awt.Font;
import java.awt.event.*;
import java.io.File;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class MANAGEORDER extends javax.swing.JFrame {
    
    private String userRole;

    public MANAGEORDER(String role) {
        initComponents();
        loadItems();
        this.userRole = role;
        OrderTable.getTableHeader().setFont(new Font("Segoe UI Variable", Font.PLAIN, 14));
        SearchF.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
                loadItems();
            }

            public void removeUpdate(DocumentEvent e) {
                loadItems();
            }

            public void changedUpdate(DocumentEvent e) {
                loadItems();
            }
        });

        StatusComboBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                loadItems();
            }
        });
        OrderTable.getTableHeader().setFont(new Font("Segoe UI Variable", Font.PLAIN, 14));
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        JTable[] tables = {OrderTable};

        for (JTable table : tables) {
            // Center cells
            for (int i = 0; i < table.getColumnCount(); i++) {
                table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            }

            // Custom header renderer with background color and bold font
            JTableHeader header = table.getTableHeader();
            DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
            headerRenderer.setHorizontalAlignment(JLabel.CENTER);
            headerRenderer.setBackground(Color.decode("#325ea0")); // Your desired color
            headerRenderer.setForeground(Color.WHITE); // White text looks good on dark blue

            // Set font to Segoe UI, size 14, and bold for header only
            headerRenderer.setFont(new Font("Segoe UI", Font.BOLD, 14));  // Ensure it's bold

            // Apply the custom header renderer to each column
            for (int i = 0; i < table.getColumnCount(); i++) {
                table.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
            }

            // Repaint to apply the changes
            header.repaint();  // Ensure the header is repainted after changes
        }

    
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SearchF = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        OrderTable = new javax.swing.JTable();
        BackBtn = new javax.swing.JButton();
        NewOrderBtn = new javax.swing.JButton();
        StatusComboBox = new javax.swing.JComboBox<>();
        ViewOrdBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        FINALBG = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        SearchF.setSelectionColor(new java.awt.Color(0, 0, 0));
        SearchF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchFActionPerformed(evt);
            }
        });
        getContentPane().add(SearchF, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 140, 345, 32));

        OrderTable.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        OrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Order Id", "Date", "Total Price", "Status"
            }
        ));
        OrderTable.setIntercellSpacing(new java.awt.Dimension(0, 5));
        OrderTable.setRowHeight(25);
        jScrollPane2.setViewportView(OrderTable);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 240, 906, 243));

        BackBtn.setBackground(new java.awt.Color(217, 234, 253));
        BackBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        BackBtn.setForeground(new java.awt.Color(0, 0, 0));
        BackBtn.setText("BACK");
        BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnActionPerformed(evt);
            }
        });
        getContentPane().add(BackBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 530, 170, 42));

        NewOrderBtn.setBackground(new java.awt.Color(217, 234, 253));
        NewOrderBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        NewOrderBtn.setForeground(new java.awt.Color(0, 0, 0));
        NewOrderBtn.setText("ADD NEW ORDER");
        NewOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewOrderBtnActionPerformed(evt);
            }
        });
        getContentPane().add(NewOrderBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 530, 170, 42));

        StatusComboBox.setBackground(new java.awt.Color(217, 234, 253));
        StatusComboBox.setFont(new java.awt.Font("Segoe UI Variable", 0, 12)); // NOI18N
        StatusComboBox.setForeground(new java.awt.Color(0, 0, 0));
        StatusComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Status", "Completed", "Pending" }));
        StatusComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatusComboBoxActionPerformed(evt);
            }
        });
        getContentPane().add(StatusComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 184, 140, 32));

        ViewOrdBtn.setBackground(new java.awt.Color(217, 234, 253));
        ViewOrdBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        ViewOrdBtn.setForeground(new java.awt.Color(0, 0, 0));
        ViewOrdBtn.setText("VIEW ORDER");
        ViewOrdBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewOrdBtnActionPerformed(evt);
            }
        });
        getContentPane().add(ViewOrdBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 530, 170, 42));

        jLabel7.setFont(new java.awt.Font("Tw Cen MT", 1, 30)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("STOCKHUB");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(415, 10, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Filter:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 190, 39, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Search Order Id:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 145, 110, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Order and Inventory System");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(392, 40, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("MANAGE ORDER");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(424, 92, 120, -1));

        FINALBG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/MANAGE ORDER BG FINAL.png"))); // NOI18N
        FINALBG.setText("jLabel1");
        getContentPane().add(FINALBG, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 970, -1));

        jPanel1.setPreferredSize(new java.awt.Dimension(555, 500));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-5, 0, 970, 610));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnActionPerformed
        // TODO add your handling code here:
         if ("Employee".equalsIgnoreCase(userRole)) {
        EMPLOYEEMENU employeeMenu = new EMPLOYEEMENU();
        employeeMenu.setVisible(true);
    } else if ("Admin".equalsIgnoreCase(userRole)) {
        ADMINMENU adminMenu = new ADMINMENU();
        adminMenu.setVisible(true);
    }
    this.dispose(); 
    }//GEN-LAST:event_BackBtnActionPerformed

    private void NewOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewOrderBtnActionPerformed
        // TODO add your handling code here:
        copyItemsToBackupFromManageOrder();

        // Step 2: Clear Cart.json (Write an empty array to Cart.json)
        try (FileWriter file = new FileWriter("src//Main//Cart.json")) {
            file.write("[]");
            file.flush();
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error clearing Cart.json!", "Error", JOptionPane.ERROR_MESSAGE);
        }

        // Step 3: Continue with opening the ADDORDER form
       ADDORDER addOrder = new ADDORDER(userRole, this);
    addOrder.setVisible(true);
    this.setVisible(false);

    }//GEN-LAST:event_NewOrderBtnActionPerformed

    private void StatusComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StatusComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_StatusComboBoxActionPerformed

    private void ViewOrdBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewOrdBtnActionPerformed
        // Check if a row is selected in the table
    int selectedRow = OrderTable.getSelectedRow();
    if (selectedRow != -1) {
        // Get the selected order ID
        String selectedOrderId = OrderTable.getValueAt(selectedRow, 0).toString(); // Assuming orderId is in column 0
        
        // Pass the selectedOrderId, userRole, and this (MANAGEORDER instance) to the VIEWORDER constructor
        VIEWORDER viewOrder = new VIEWORDER(selectedOrderId, userRole, this);
        viewOrder.setVisible(true);
        this.setVisible(false); // Hide MANAGEORDER
    } else {
        // If no row is selected, show a warning message
        JOptionPane.showMessageDialog(this, "Please select an order to view.", "No Selection", JOptionPane.INFORMATION_MESSAGE);
    }
    }//GEN-LAST:event_ViewOrdBtnActionPerformed

    private void SearchFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchFActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MANAGEORDER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MANAGEORDER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MANAGEORDER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MANAGEORDER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MANAGEORDER("Role").setVisible(true);
            }
        });
    }

    private void loadItems() {
        DefaultTableModel model = (DefaultTableModel) OrderTable.getModel();
        model.setRowCount(0); // Clear existing rows

        String searchKeyword = SearchF.getText().toLowerCase().trim();
        String selectedStatus = StatusComboBox.getSelectedItem().toString();

        try {
            JSONParser parser = new JSONParser();
            FileReader reader = new FileReader("src//Main//Orders.json");
            JSONArray orderList = (JSONArray) parser.parse(reader);

            // Sorting the orderList based on orderId in descending order
            orderList.sort((o1, o2) -> {
                JSONObject order1 = (JSONObject) o1;
                JSONObject order2 = (JSONObject) o2;
                String orderId1 = (String) order1.get("orderId");
                String orderId2 = (String) order2.get("orderId");
                return orderId2.compareTo(orderId1); // Descending order
            });

            // Loop through the sorted orderList and add items to the table
            for (Object obj : orderList) {
                JSONObject order = (JSONObject) obj;
                String orderId = (String) order.get("orderId");
                String date = (String) order.get("date");
                String status = (String) order.get("status");
                double totalPrice = (double) order.get("totalPrice");

                // Filter by status
                boolean matchesStatus = selectedStatus.equals("All Status") || status.equalsIgnoreCase(selectedStatus);
                // Filter by keyword
                boolean matchesKeyword = orderId.toLowerCase().contains(searchKeyword);

                if (matchesStatus && matchesKeyword) {
                    model.addRow(new Object[]{orderId, date, String.format("₱%.2f", totalPrice), status});
                }
            }

        } catch (IOException | ParseException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading orders!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void copyItemsToBackupFromManageOrder() {
        try {
            File itemsFile = new File("src//Main//Items.json");
            File backupFile = new File("src//Main//items_backup.json");

            // Check if items.json exists
            if (itemsFile.exists()) {
                // If the backup file exists, overwrite it with items.json
                FileReader reader = new FileReader(itemsFile);
                JSONParser parser = new JSONParser();
                JSONArray itemsArray = (JSONArray) parser.parse(reader);
                reader.close();

                // Write the contents of items.json into items_backup.json
                FileWriter writer = new FileWriter(backupFile);
                writer.write(itemsArray.toJSONString());
                writer.flush();
                writer.close();
            } else {
                JOptionPane.showMessageDialog(this, "items.json not found.");
            }
        } catch (IOException | ParseException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error copying items.json to items_backup.json", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackBtn;
    private javax.swing.JLabel FINALBG;
    private javax.swing.JButton NewOrderBtn;
    private javax.swing.JTable OrderTable;
    private javax.swing.JTextField SearchF;
    private javax.swing.JComboBox<String> StatusComboBox;
    private javax.swing.JButton ViewOrdBtn;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
