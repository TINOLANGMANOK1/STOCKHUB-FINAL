/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Main;

/**
 *
 * @author Acer
 */
import javax.swing.*;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

public class EDITCARTITEM extends javax.swing.JFrame {

    private ADDORDER addOrderFrame;

    public EDITCARTITEM(String itemNumber, String itemName, int quantity, double pricePerItem, ADDORDER parent) {
        initComponents();
        this.addOrderFrame = parent;

        // Set label values
        ItemIdLabel.setText(itemNumber);
        ItemNameLabel.setText(itemName);
        QuantityLabel.setText(String.valueOf(quantity));
        PricePerItemLabel.setText("â‚±" + String.format("%.2f", pricePerItem));

        // Initial price calculation
        updateTotalPrice(pricePerItem);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ItemIdLabel = new javax.swing.JLabel();
        BackBtn = new javax.swing.JButton();
        SaveChangeBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        RemoveBtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        ItemNameLabel = new javax.swing.JLabel();
        PricePerItemLabel = new javax.swing.JLabel();
        PriceAllLabel = new javax.swing.JLabel();
        QuantityLabel = new javax.swing.JLabel();
        DecreaseBtn = new javax.swing.JButton();
        IncreaseBtn1 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        FINALBG = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ItemIdLabel.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        ItemIdLabel.setForeground(new java.awt.Color(0, 0, 0));
        ItemIdLabel.setText("ItemIdLabel");
        getContentPane().add(ItemIdLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 150, -1, -1));

        BackBtn.setBackground(new java.awt.Color(217, 234, 253));
        BackBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        BackBtn.setForeground(new java.awt.Color(0, 0, 0));
        BackBtn.setText("BACK");
        BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnActionPerformed(evt);
            }
        });
        getContentPane().add(BackBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(157, 448, 170, 42));

        SaveChangeBtn.setBackground(new java.awt.Color(217, 234, 253));
        SaveChangeBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        SaveChangeBtn.setForeground(new java.awt.Color(0, 0, 0));
        SaveChangeBtn.setText("SAVE CHANGES");
        SaveChangeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveChangeBtnActionPerformed(evt);
            }
        });
        getContentPane().add(SaveChangeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 390, 170, 42));
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Quantity:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 320, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Item Name:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 192, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Price per Item:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 280, -1, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Price all Item:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 236, -1, -1));

        RemoveBtn.setBackground(new java.awt.Color(217, 234, 253));
        RemoveBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        RemoveBtn.setForeground(new java.awt.Color(204, 0, 51));
        RemoveBtn.setText("REMOVE ITEM");
        RemoveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveBtnActionPerformed(evt);
            }
        });
        getContentPane().add(RemoveBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 390, 170, 42));

        jLabel8.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Item No:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 150, -1, -1));

        jLabel12.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Order and Inventory System");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(147, 40, -1, -1));

        jLabel11.setFont(new java.awt.Font("Tw Cen MT", 1, 30)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("STOCKHUB");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, -1, -1));

        ItemNameLabel.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        ItemNameLabel.setForeground(new java.awt.Color(0, 0, 0));
        ItemNameLabel.setText("ItemNumberLabel");
        getContentPane().add(ItemNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 192, 140, -1));

        PricePerItemLabel.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        PricePerItemLabel.setForeground(new java.awt.Color(0, 153, 0));
        PricePerItemLabel.setText("PriceperItemLabel");
        getContentPane().add(PricePerItemLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 236, -1, -1));

        PriceAllLabel.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        PriceAllLabel.setForeground(new java.awt.Color(0, 153, 0));
        PriceAllLabel.setText("PriceallItemLabel");
        getContentPane().add(PriceAllLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 280, -1, -1));

        QuantityLabel.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        QuantityLabel.setForeground(new java.awt.Color(0, 0, 0));
        QuantityLabel.setText("0");
        getContentPane().add(QuantityLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 320, 40, -1));

        DecreaseBtn.setBackground(new java.awt.Color(217, 234, 253));
        DecreaseBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        DecreaseBtn.setForeground(new java.awt.Color(0, 0, 0));
        DecreaseBtn.setText("-");
        DecreaseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecreaseBtnActionPerformed(evt);
            }
        });
        getContentPane().add(DecreaseBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 314, 40, 35));

        IncreaseBtn1.setBackground(new java.awt.Color(217, 234, 253));
        IncreaseBtn1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        IncreaseBtn1.setForeground(new java.awt.Color(0, 0, 0));
        IncreaseBtn1.setText("+");
        IncreaseBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IncreaseBtn1ActionPerformed(evt);
            }
        });
        getContentPane().add(IncreaseBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 314, 40, 35));

        jLabel10.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("EDIT CART ITEM");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(187, 91, 110, -1));

        FINALBG.setForeground(new java.awt.Color(0, 0, 0));
        FINALBG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/EDITCART BG FINAL.png"))); // NOI18N
        FINALBG.setText("jLabel6");
        getContentPane().add(FINALBG, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 480, 520));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_BackBtnActionPerformed

    private void SaveChangeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveChangeBtnActionPerformed
         String itemNumber = ItemIdLabel.getText();
        int newQuantity;

        try {
            newQuantity = Integer.parseInt(QuantityLabel.getText());
            if (newQuantity <= 0) {
                JOptionPane.showMessageDialog(this, "Quantity must be greater than 0.");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid quantity.");
            return;
        }

        try {
            String path = "src//Main//Cart.json";
            JSONParser parser = new JSONParser();
            JSONArray cartArray;
            try (java.io.FileReader reader = new java.io.FileReader(path)) {
                cartArray = (JSONArray) parser.parse(reader);
            }

            boolean found = false;
            boolean quantityChanged = false;

            for (Object obj : cartArray) {
                JSONObject item = (JSONObject) obj;
                if (item.get("itemNumber").equals(itemNumber)) {
                    int currentQuantity = Integer.parseInt(item.get("quantity").toString());

                    if (currentQuantity != newQuantity) {
                        item.put("quantity", newQuantity);
                        double pricePerItem = Double.parseDouble(item.get("price").toString());
                        double totalPrice = newQuantity * pricePerItem;
                        PriceAllLabel.setText("â‚±" + String.format("%.2f", totalPrice));
                        quantityChanged = true;
                    }

                    found = true;
                    break;
                }
            }

            if (found) {
                if (!quantityChanged) {
                    JOptionPane.showMessageDialog(this, "No changes made to the quantity.");
                } else {
                    int confirmSave = JOptionPane.showConfirmDialog(this,
                            "Are you sure you want to save these changes?",
                            "Confirm Save", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                    if (confirmSave == JOptionPane.NO_OPTION) {
                        return;
                    }

                    try (java.io.FileWriter writer = new java.io.FileWriter(path)) {
                        writer.write(cartArray.toJSONString());
                        writer.flush();
                    }

                    JOptionPane.showMessageDialog(this, "Changes saved successfully.");
                }

                if (addOrderFrame != null) {
                    addOrderFrame.loadCartItems();
                }
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, "Item not found in cart.");
                this.dispose();
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error occurred while saving changes.");
            this.dispose();
        }
    }//GEN-LAST:event_SaveChangeBtnActionPerformed

    private void updateTotalPrice(double pricePerItem) {
        try {
            int quantity = Integer.parseInt(QuantityLabel.getText());
            double totalPrice = pricePerItem * quantity;
            PriceAllLabel.setText("â‚±" + String.format("%.2f", totalPrice));
        } catch (NumberFormatException e) {
            e.printStackTrace();
            PriceAllLabel.setText("â‚±0.00");
        }
    }

    private void RemoveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveBtnActionPerformed
        String itemNumber = ItemIdLabel.getText();

        int confirmRemove = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to remove this item from the cart?",
                "Confirm Remove", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (confirmRemove == JOptionPane.NO_OPTION) {
            return;
        }

        try {
            String path = "src//Main//Cart.json";
            JSONParser parser = new JSONParser();
            JSONArray cartArray;
            try (java.io.FileReader reader = new java.io.FileReader(path)) {
                cartArray = (JSONArray) parser.parse(reader);
            }

            boolean removed = cartArray.removeIf(obj -> ((JSONObject) obj).get("itemNumber").equals(itemNumber));

            if (removed) {
                try (java.io.FileWriter writer = new java.io.FileWriter(path)) {
                    writer.write(cartArray.toJSONString());
                    writer.flush();
                }

                JOptionPane.showMessageDialog(this, "Item removed successfully.");
                if (addOrderFrame != null) {
                    addOrderFrame.loadCartItems();
                }
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, "Item not found in cart.");
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error occurred while removing item.");
        }
    }//GEN-LAST:event_RemoveBtnActionPerformed

    private void DecreaseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecreaseBtnActionPerformed
        // TODO add your handling code here:
        updateQuantity(-1);
    }//GEN-LAST:event_DecreaseBtnActionPerformed

    private void IncreaseBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IncreaseBtn1ActionPerformed
        // TODO add your handling code here:
        updateQuantity(1);
    }//GEN-LAST:event_IncreaseBtn1ActionPerformed
     private void updateQuantity(int delta) {
        String itemNumber = ItemIdLabel.getText();
        try {
            String path = "src//Main//Items_backup.json";
            JSONParser parser = new JSONParser();
            JSONArray itemsArray;
            try (java.io.FileReader reader = new java.io.FileReader(path)) {
                itemsArray = (JSONArray) parser.parse(reader);
            }

            JSONObject selectedItem = null;
            for (Object obj : itemsArray) {
                JSONObject item = (JSONObject) obj;
                if (item.get("itemNumber").equals(itemNumber)) {
                    selectedItem = item;
                    break;
                }
            }

            if (selectedItem != null) {
                int stock = Integer.parseInt(selectedItem.get("quantity").toString());
                int currentQty = Integer.parseInt(QuantityLabel.getText());

                int newQty = currentQty + delta;
                if (newQty >= 1 && newQty <= stock) {
                    QuantityLabel.setText(String.valueOf(newQty));
                    updateTotalPrice(Double.parseDouble(PricePerItemLabel.getText().substring(1)));
                } else {
                    JOptionPane.showMessageDialog(this, (delta > 0)
                            ? "Cannot increase quantity beyond available stock."
                            : "Quantity cannot be less than 1.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Item not found in inventory.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error occurred while updating quantity.");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EDITCARTITEM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EDITCARTITEM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EDITCARTITEM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EDITCARTITEM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackBtn;
    private javax.swing.JButton DecreaseBtn;
    private javax.swing.JLabel FINALBG;
    private javax.swing.JButton IncreaseBtn1;
    private javax.swing.JLabel ItemIdLabel;
    private javax.swing.JLabel ItemNameLabel;
    private javax.swing.JLabel PriceAllLabel;
    private javax.swing.JLabel PricePerItemLabel;
    private javax.swing.JLabel QuantityLabel;
    private javax.swing.JButton RemoveBtn;
    private javax.swing.JButton SaveChangeBtn;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    // End of variables declaration//GEN-END:variables
}
